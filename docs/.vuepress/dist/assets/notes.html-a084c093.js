const n=JSON.parse('{"key":"v-4145f64b","path":"/demo/notes.html","title":"安装项目","lang":"en-US","frontmatter":{"tiele":"测试页面","icon":"page","order":4,"author":"Jimmy","date":"2023-03-20T00:00:00.000Z","tag":["tag1","tag2"],"sticky":true,"star":true,"footer":"Footer test","copyright":"jimi","description":"安装项目 image-20230320173330881 test package com.hhyy; public class Basic01 { public static void main(String[] args) { // f1(null); Integer[] testArrPrint = {1,23,4,5}; printArr(testArrPrint); } /** * 测试浮点类型的精度消失问题 */ public static void f1(String s1){ float a = 2.0f - 1.9f; float b = 1.8f - 1.7f; System.out.println(a); System.out.println(b); System.out.println(a == b); // false a = 2.0f - 1.9f; b = 1.9f - 1.8f; System.out.println(a); System.out.println(b); System.out.println(a == b); // true } public static void testStringandHashCode(){ String s = new String(\\"123\\"); String s2 = new String(\\"123\\"); System.out.println(s.hashCode() == s2.hashCode()); System.out.println(s.equals(s2)); System.out.println(s == s2); } public static int f2(){ int a = 1; try{ a = 2; return a; }catch(Exception e){ a = 3; }finally{ a = 4; return a; } } /* 静态方法由于是在类实例化之前加载， 故而其泛型类型需要在方法上指定。 static 后面的 &lt;E&gt; 属于泛型的声明； 后进的 E 属于使用该泛型 */ public static &lt;E&gt; void printArr(E[] arr){ for (E e:arr) { System.out.printf(\\"%s\\",e); } System.out.println(); } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/demo/notes.html"}],["meta",{"property":"og:site_name","content":"Blog Demo"}],["meta",{"property":"og:title","content":"安装项目"}],["meta",{"property":"og:description","content":"安装项目 image-20230320173330881 test package com.hhyy; public class Basic01 { public static void main(String[] args) { // f1(null); Integer[] testArrPrint = {1,23,4,5}; printArr(testArrPrint); } /** * 测试浮点类型的精度消失问题 */ public static void f1(String s1){ float a = 2.0f - 1.9f; float b = 1.8f - 1.7f; System.out.println(a); System.out.println(b); System.out.println(a == b); // false a = 2.0f - 1.9f; b = 1.9f - 1.8f; System.out.println(a); System.out.println(b); System.out.println(a == b); // true } public static void testStringandHashCode(){ String s = new String(\\"123\\"); String s2 = new String(\\"123\\"); System.out.println(s.hashCode() == s2.hashCode()); System.out.println(s.equals(s2)); System.out.println(s == s2); } public static int f2(){ int a = 1; try{ a = 2; return a; }catch(Exception e){ a = 3; }finally{ a = 4; return a; } } /* 静态方法由于是在类实例化之前加载， 故而其泛型类型需要在方法上指定。 static 后面的 &lt;E&gt; 属于泛型的声明； 后进的 E 属于使用该泛型 */ public static &lt;E&gt; void printArr(E[] arr){ for (E e:arr) { System.out.printf(\\"%s\\",e); } System.out.println(); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"安装项目"}],["meta",{"property":"article:author","content":"Jimmy"}],["meta",{"property":"article:tag","content":"tag1"}],["meta",{"property":"article:tag","content":"tag2"}],["meta",{"property":"article:published_time","content":"2023-03-20T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"安装项目\\",\\"image\\":[\\"https://mister-hope.github.io/\\"],\\"datePublished\\":\\"2023-03-20T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jimmy\\"}]}"]]},"headers":[{"level":1,"title":"安装项目","slug":"安装项目","link":"#安装项目","children":[]}],"git":{},"readingTime":{"minutes":0.77,"words":231},"filePathRelative":"demo/notes.md","localizedDate":"March 20, 2023","excerpt":"<h1> 安装项目</h1>\\n<figure><figcaption>image-20230320173330881</figcaption></figure>\\n<h2> test</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">package</span> <span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>hhyy</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Basic01</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token comment\\">//        f1(null);</span>\\n\\n        <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> testArrPrint <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">23</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">printArr</span><span class=\\"token punctuation\\">(</span>testArrPrint<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 测试浮点类型的精度消失问题\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">f1</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> s1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">float</span> a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2.0f</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1.9f</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">float</span> b <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1.8f</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1.7f</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>a <span class=\\"token operator\\">==</span> b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// false</span>\\n        a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2.0f</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1.9f</span><span class=\\"token punctuation\\">;</span>\\n        b <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1.9f</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1.8f</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>a <span class=\\"token operator\\">==</span> b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// true</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">testStringandHashCode</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">String</span> s <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"123\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">String</span> s2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"123\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hashCode</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> s2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hashCode</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span>s2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>s <span class=\\"token operator\\">==</span> s2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">f2</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">try</span><span class=\\"token punctuation\\">{</span>\\n            a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">return</span> a<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">catch</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">finally</span><span class=\\"token punctuation\\">{</span>\\n            a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">return</span> a<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">/*\\n    静态方法由于是在类实例化之前加载， 故而其泛型类型需要在方法上指定。\\n    static 后面的 &lt;E&gt; 属于泛型的声明；\\n    后进的 E 属于使用该泛型\\n    */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">E</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">printArr</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">E</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> arr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">E</span> e<span class=\\"token operator\\">:</span>arr<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%s\\"</span><span class=\\"token punctuation\\">,</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
